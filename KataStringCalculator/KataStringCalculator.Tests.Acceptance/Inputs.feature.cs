// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KataStringCalculator.Tests.Acceptance
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calcolo della somma di una sequenza di numeri")]
    public partial class CalcoloDellaSommaDiUnaSequenzaDiNumeriFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Inputs.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("it-IT"), "Calcolo della somma di una sequenza di numeri", "Al fine di ottenere il risultato di una addizione\r\nIn qualità di calcolatore \r\nVo" +
                    "glio calcolare la somma di una sequenza di numeri separati da virgola", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("se la sequenza è vuota, allora il risultato è 0")]
        public virtual void SeLaSequenzaEVuotaAlloraIlRisultatoE0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("se la sequenza è vuota, allora il risultato è 0", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("una stringa vuota", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Data ");
#line 8
 testRunner.When("eseguo il calcolo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 9
 testRunner.Then("il risultato è:0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("se la sequenza contiene un numero, allora il risultato è quel numero")]
        [NUnit.Framework.TestCaseAttribute("1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("9", "9", null)]
        [NUnit.Framework.TestCaseAttribute("13", "13", null)]
        [NUnit.Framework.TestCaseAttribute("123", "123", null)]
        [NUnit.Framework.TestCaseAttribute("1234", "1234", null)]
        public virtual void SeLaSequenzaContieneUnNumeroAlloraIlRisultatoEQuelNumero(string stringa, string risultato, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("se la sequenza contiene un numero, allora il risultato è quel numero", exampleTags);
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given(string.Format("la seguente stringa:{0}", stringa), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Data ");
#line 13
 testRunner.When("eseguo il calcolo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 14
 testRunner.Then(string.Format("il risultato è:{0}", risultato), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("se la sequenza contiene due numeri separati da virgola, allora il risultato è la " +
            "somma di quei numeri")]
        [NUnit.Framework.TestCaseAttribute("0,", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1,", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1,2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("13,23", "36", null)]
        [NUnit.Framework.TestCaseAttribute("145,23", "168", null)]
        [NUnit.Framework.TestCaseAttribute("1234,2", "1236", null)]
        public virtual void SeLaSequenzaContieneDueNumeriSeparatiDaVirgolaAlloraIlRisultatoELaSommaDiQueiNumeri(string stringa, string risultato, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("se la sequenza contiene due numeri separati da virgola, allora il risultato è la " +
                    "somma di quei numeri", exampleTags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given(string.Format("la seguente stringa:{0}", stringa), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Data ");
#line 26
 testRunner.When("eseguo il calcolo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 27
 testRunner.Then(string.Format("il risultato è:{0}", risultato), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("se la sequenza contiene diversi numeri separati da virgola, allora il risultato è" +
            " la somma di quei numeri")]
        [NUnit.Framework.TestCaseAttribute("1,2,3,4,5,6", "21", null)]
        [NUnit.Framework.TestCaseAttribute("0,10,33,456", "499", null)]
        public virtual void SeLaSequenzaContieneDiversiNumeriSeparatiDaVirgolaAlloraIlRisultatoELaSommaDiQueiNumeri(string stringa, string risultato, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("se la sequenza contiene diversi numeri separati da virgola, allora il risultato è" +
                    " la somma di quei numeri", exampleTags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given(string.Format("la seguente stringa:{0}", stringa), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Data ");
#line 39
 testRunner.When("eseguo il calcolo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 40
 testRunner.Then(string.Format("il risultato è:{0}", risultato), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
