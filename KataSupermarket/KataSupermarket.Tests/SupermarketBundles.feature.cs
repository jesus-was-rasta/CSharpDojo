// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KataSupermarket.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Supermarket Bundles")]
    public partial class SupermarketBundlesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SupermarketBundles.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("it-IT"), "Supermarket Bundles", "Al fine di ottenere sconti e offerte\nIn qualità di acquirente del Supermercato\nVo" +
                    "glio conoscere il costo dei prodotti e le relative offerte associate", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("compro 1 pezzo del ProdottoA e pago 50 dollari")]
        [NUnit.Framework.CategoryAttribute("Bundles")]
        public virtual void Compro1PezzoDelProdottoAEPago50Dollari()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("compro 1 pezzo del ProdottoA e pago 50 dollari", new string[] {
                        "Bundles"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("che ProdottoA costa 50 dollari", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 9
 testRunner.Given("che compro 1 pezzo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 10
 testRunner.When("chiedo il prezzo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 11
 testRunner.Then("il prezzo è 50 dollari", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("la mia lista è AABC e pago 120")]
        public virtual void LaMiaListaEAABCEPago120()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("la mia lista è AABC e pago 120", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("2 pezzi di A che costa 50 dollari", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 16
 testRunner.Given("1 pezzi di B che costa 30 dollari", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 17
 testRunner.Given("1 pezzi di C che costa 10 dollari", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 18
 testRunner.Given("una offerta per 2 pezzi di A per 80 dollari", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dato ");
#line 19
 testRunner.When("chiedo il prezzo totale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 20
 testRunner.Then("il prezzo totale è 120 dollari", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Allora ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
